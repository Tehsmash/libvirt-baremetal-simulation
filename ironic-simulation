#!/bin/bash

function ironic_create_veth_pair {
    local name1=$1
    local name2=$2
    local mtu=$3
    sudo ip link add dev $name1 type veth peer name $name2
    sudo ip link set $name1 up
    sudo ip link set $name2 up
    sudo ip link set $name1 mtu $mtu
    sudo ip link set $name2 mtu $mtu
}

function ironic_create_ovs_virtual_switch {
    local vswitch_name=$1
    local uplink=$2
    sudo ovs-vsctl add-br $vswitch_name
    sudo ovs-vsctl add-port $vswitch_name $uplink
    sudo ip link set $vswitch_name up
}

function ironic_add_port_to_virtual_switch {
    local vswitch_name=$1
    local tapif=$2
    local seg_type=${3:-$IRONIC_PHYSICAL_NETWORK_TYPE}
    if [[ "$seg_type" == "flat" ]]; then
        sudo ovs-vsctl add-port $vswitch_name $tapif
    elif [[ "$seg_type" == "vlan" ]]; then
        # If vlan provider network type pre-program provision network segment
        # so that we can simulate a statically configured VLAN network, i.e.
        # VLAN provider network + Ironic Flat Network Interface.
        sudo ovs-vsctl add-port $vswitch_name $tapif tag=$IRONIC_PROVISION_NETWORK_SEG
    fi
}

function create_simulated_baremetal_environment {
    # Define MTU:
    # VXLAN max packet size 1500 - VXLAN header 14 - vlan header 4 -
    # eth header 14 - IPv6 header 40 = 1428
    local mtu=$PUBLIC_BRIDGE_MTU

    # Create virtual physical interface
    ironic_create_veth_pair bminthost bmintswitch $mtu
    IRONIC_PHYSICAL_INTERFACE="bminthost"

    # Create virtual switch
    if [[ "$HOST_TOPOLOGY_ROLE" == "subnode" ]]; then
        node_id=$(echo $HOST_IP | cut -d '.' -f 4)
    fi
    local vswitch_name="bmswitch${node_id}"
    ironic_create_ovs_virtual_switch $vswitch_name bmintswitch

    # Get virtual switch MAC address for local link connection information
    local bridge_mac
    bridge_mac=$(ip link show dev $vswitch_name | egrep -o "ether [A-Za-z0-9:]+"|sed "s/ether\ //")

    if [[ "$IRONIC_VM_LOG_CONSOLE" == "True" ]] ; then
        local log_arg="-l $IRONIC_VM_LOG_DIR"

        if [[ "$IRONIC_VM_LOG_ROTATE" == "True" ]] ; then
            setup_qemu_log_hook
        fi
    else
        local log_arg=""
    fi

    # Create VMs and plug them into the virtual switch
    local vbmc_port=$IRONIC_VBMC_PORT_RANGE_START
    local pdu_outlet=$IRONIC_VPDU_PORT_RANGE_START
    local vm_name
    local vm_opts=""
    if [[ -n "$IRONIC_VM_EMULATOR" ]]; then
        vm_opts+=" -e $IRONIC_VM_EMULATOR"
    fi
    vm_opts+=" -E $IRONIC_VM_ENGINE"

    local tapif
    for vm_name in $(_ironic_bm_vm_names); do
        tapif=tap-$vm_name
        sudo ip tuntap add dev $tapif mode tap
        sudo ip link set $tapif mtu $mtu
        sudo ip link set $tapif up
        ironic_add_port_to_virtual_switch $vswitch_name $tapif
        sudo -E su $STACK_USER -c "$IRONIC_SCRIPTS_DIR/create-node.sh -n $vm_name \
            -c $IRONIC_VM_SPECS_CPU -m $IRONIC_VM_SPECS_RAM -d $IRONIC_VM_SPECS_DISK \
            -a $IRONIC_VM_SPECS_CPU_ARCH -t $tapif $vm_opts -p $vbmc_port -o $pdu_outlet \
            -f $IRONIC_VM_SPECS_DISK_FORMAT $log_arg -- ${bridge_mac} \
            ${vswitch_name}" >> $IRONIC_VM_MACS_CSV_FILE
        vbmc_port=$((vbmc_port+1))
        pdu_outlet=$((pdu_outlet+1))
    done

    # Create simulated network interface for the conductor plugged into the virtual switch
    ironic_create_veth_pair bmcondhost bmcondswitch $mtu
    ironic_add_port_to_virtual_switch $vswitch_name bmcondswitch
    IRONIC_PHYSICAL_CONDUCTOR_INTERFACE="bmcondhost"

    # If this is a multinode deployment configure VXLAN between the nodes
    if [[ "$HOST_TOPOLOGY" == "multinode" ]]; then
        setup_vxlan_network
    fi
}

function setup_vxlan_network {
    local old_vxlan_bridge
    old_vxlan_bridge=$(sudo ovs-vsctl show | grep br_ironic_vxlan)

    if [[ -n "${old_vxlan_bridge}" ]]; then
        # If vxlan bridge already exists just plumb that and return
        sudo ip link add dev brbm_vxlan type veth peer name vxlan_brbm
        sudo ip link set brbm_vxlan up
        sudo ip link set vxlan_brbm up
        sudo ovs-vsctl add-port $vswitch_name brbm_vxlan
        sudo ovs-vsctl add-port br_ironic_vxlan vxlan_brbm
        return
    fi
    # Connect multinode bmswitchs together with a tunnel to simulate a single physical network
    # We use a VXLAN tunnel because some CI node providers don't allow GRE
    if [[ "$HOST_TOPOLOGY_ROLE" == "primary" ]]; then
        local id
        for node in $HOST_TOPOLOGY_SUBNODES; do
            id=$(echo $node | cut -d '.' -f 4)
            sudo ip link add bmswdown$id type vxlan id 1 remote $node local $HOST_IP dstport 4789
            sudo ip link set bmswdown$id up
            ironic_add_port_to_virtual_switch $vswitch_name bmswdown$id flat
        done
    elif [[ "$HOST_TOPOLOGY_ROLE" == "subnode" ]]; then
        sudo ip link add bmswitchup type vxlan id 1 remote $SERVICE_HOST local $HOST_IP dstport 4789
        sudo ip link set bmswitchup up
        ironic_add_port_to_virtual_switch $vswitch_name bmswitchup flat
    fi
}
